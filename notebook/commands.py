import argparse
from typing import List
from .models import Note
from .storage import NoteStorage


class NoteCommands:
    def __init__(self):
        self.storage = NoteStorage()

    def add_note(self, title: str, content: str, tags: List[str] = None,
                 priority: str = "medium") -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É"""
        note = Note(title=title, content=content, tags=tags, priority=priority)
        self.storage.add_note(note)
        print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {note.note_id})")

    def list_notes(self, status: str = None, priority: str = None,
                   show_all: bool = False) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        notes = self.storage.load_notes()

        if not notes:
            print("üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filtered_notes = notes
        if status and not show_all:
            filtered_notes = [note for note in filtered_notes if note.status == status]
        if priority and not show_all:
            filtered_notes = [note for note in filtered_notes if note.priority == priority]

        if not filtered_notes:
            print("üîç –ó–∞–º–µ—Ç–∫–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(filtered_notes)}")
        print("=" * 50)
        for note in filtered_notes:
            print(note)

    def search_notes(self, keyword: str, search_in_tags: bool = False) -> None:
        """–ò—â–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        notes = self.storage.load_notes()
        keyword = keyword.lower()

        found_notes = []
        for note in notes:
            # –ü–æ–∏—Å–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏
            if (keyword in note.title.lower() or
                    keyword in note.content.lower()):
                found_notes.append(note)
            # –ü–æ–∏—Å–∫ –≤ —Ç–µ–≥–∞—Ö
            elif search_in_tags and any(keyword in tag.lower() for tag in note.tags):
                found_notes.append(note)

        if found_notes:
            print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}': {len(found_notes)}")
            print("=" * 50)
            for note in found_notes:
                print(note)
        else:
            print(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    def delete_note(self, note_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ ID"""
        if self.storage.delete_note(note_id):
            print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å ID {note_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        else:
            print(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å ID {note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def update_note_status(self, note_id: int, status: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏"""
        notes = self.storage.load_notes()
        for note in notes:
            if note.note_id == note_id:
                note.status = status
                self.storage.update_note(note)
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏ {note_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
                return
        print(f"‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å ID {note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


def main():
    commands = NoteCommands()
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–º–µ—Ç–æ–∫")

    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_parser = subparsers.add_parser('--add', help='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É')
    add_parser.add_argument('--title', required=True, help='–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏')
    add_parser.add_argument('--content', required=True, help='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏')
    add_parser.add_argument('--tags', nargs='+', help='–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    add_parser.add_argument('--priority', choices=['low', 'medium', 'high'],
                            default='medium', help='–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–º–µ—Ç–∫–∏')

    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞
    list_parser = subparsers.add_parser('--list', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
    list_parser.add_argument('--status', choices=['active', 'completed', 'archived'],
                             help='–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É')
    list_parser.add_argument('--priority', choices=['low', 'medium', 'high'],
                             help='–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É')
    list_parser.add_argument('--all', action='store_true',
                             help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏')

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞
    search_parser = subparsers.add_parser('--search', help='–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫')
    search_parser.add_argument('keyword', help='–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞')
    search_parser.add_argument('--tags', action='store_true',
                               help='–ò—Å–∫–∞—Ç—å —Ç–∞–∫–∂–µ –≤ —Ç–µ–≥–∞—Ö')

    # –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
    delete_parser = subparsers.add_parser('--delete', help='–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É')
    delete_parser.add_argument('id', type=int, help='ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')

    # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    status_parser = subparsers.add_parser('--status', help='–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–º–µ—Ç–∫–∏')
    status_parser.add_argument('id', type=int, help='ID –∑–∞–º–µ—Ç–∫–∏')
    status_parser.add_argument('status', choices=['active', 'completed', 'archived'],
                               help='–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    try:
        if args.command == '--add':
            commands.add_note(args.title, args.content, args.tags, args.priority)

        elif args.command == '--list':
            commands.list_notes(args.status, args.priority, args.all)

        elif args.command == '--search':
            commands.search_notes(args.keyword, args.tags)

        elif args.command == '--delete':
            commands.delete_note(args.id)

        elif args.command == '--status':
            commands.update_note_status(args.id, args.status)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()